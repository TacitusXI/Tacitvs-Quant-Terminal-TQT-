"""
Backtesting Engine –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–æ–∫ bar-by-bar
- –†–∞—Å—á–µ—Ç P&L —Å —É—á–µ—Ç–æ–º fees
- Position sizing (risk-based)
- –ú–µ—Ç—Ä–∏–∫–∏: Sharpe, Drawdown, Win Rate, –∏ —Ç.–¥.
- Equity curve tracking
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Any, Optional
from core.strategy.base import IStrategy, Signal, SignalSide, BarContext


class BacktestEngine:
    """
    Engine –¥–ª—è backtesting —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ strategy
    - –û—Ç–∫—Ä—ã–≤–∞–µ—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
    - –°—á–∏—Ç–∞–µ—Ç P&L
    - –°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
    """
    
    def __init__(
        self,
        strategy: IStrategy,
        initial_capital: float = 10000.0,
        risk_per_trade: float = 1.0,
        fee_rate: float = 0.0005  # 0.05% (maker fee –Ω–∞ –º–Ω–æ–≥–∏—Ö –±–∏—Ä–∂–∞—Ö)
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è backtesting engine.
        
        strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (IStrategy).
        initial_capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –≤ USD.
        risk_per_trade: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (1.0 = 1%).
        fee_rate: –ö–æ–º–∏—Å—Å–∏—è –±–∏—Ä–∂–∏ (0.0005 = 0.05%).
        """
        self.strategy = strategy
        self.initial_capital = initial_capital
        self.risk_per_trade = risk_per_trade
        self.fee_rate = fee_rate
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.equity = initial_capital
        self.positions: Dict[str, Dict[str, Any]] = {}  # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.trades: List[Dict[str, Any]] = []  # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        self.equity_curve: List[float] = [initial_capital]  # –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
    
    def run_backtest(
        self,
        market: str,
        history: pd.DataFrame
    ) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å backtest –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        market: –†—ã–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC-PERP').
        history: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
                 –ö–æ–ª–æ–Ω–∫–∏: timestamp, open, high, low, close, volume.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ {trades, equity_curve, metrics}.
        """
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ backtest –¥–ª—è {market}...")
        print(f"   –ü–µ—Ä–∏–æ–¥: {history['timestamp'].iloc[0].date()} - {history['timestamp'].iloc[-1].date()}")
        print(f"   –°–≤–µ—á–µ–π: {len(history)}")
        
        # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –±–∞—Ä—É
        for i in range(len(history)):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞—Ä
            current_bar = history.iloc[i]
            
            # –°–æ–∑–¥–∞–µ–º BarContext –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ctx = BarContext(
                timestamp=int(current_bar['timestamp'].timestamp() * 1000),
                market=market,
                open=current_bar['open'],
                high=current_bar['high'],
                low=current_bar['low'],
                close=current_bar['close'],
                volume=current_bar['volume']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –î–û —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ä–∞ (–Ω–µ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
            history_slice = history.iloc[:i+1].copy()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            signals = self.strategy.on_bar(ctx, history_slice)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
            for signal in signals:
                self.process_signal(signal, ctx.timestamp)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (stop loss / take profit)
            self._check_positions(ctx)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π equity –≤ curve
            self.equity_curve.append(self.equity)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._close_all_positions(history.iloc[-1], reason='backtest_end')
        
        # –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.calculate_metrics()
        
        print(f"\n‚úÖ Backtest –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –°–¥–µ–ª–æ–∫: {metrics['total_trades']}")
        print(f"   Win Rate: {metrics['win_rate']:.1f}%")
        print(f"   Total P&L: ${metrics['total_pnl']:.2f}")
        
        return {
            'trades': self.trades,
            'equity_curve': self.equity_curve,
            'metrics': metrics
        }
    
    def process_signal(self, signal: Signal, timestamp: int):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.
        
        signal: –°–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        timestamp: –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞.
        """
        market = signal.market
        
        # EXIT —Å–∏–≥–Ω–∞–ª - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if signal.side == SignalSide.EXIT:
            if market in self.positions:
                self.close_position(
                    market=market,
                    exit_price=signal.entry,
                    reason='strategy_exit',
                    timestamp=timestamp
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ —É–∂–µ
        if market in self.positions:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º position size
        stop_distance = abs(signal.entry - signal.stop)
        if stop_distance == 0:
            return  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        
        # Risk –≤ USD = risk_per_trade% –æ—Ç equity
        risk_usd = (self.risk_per_trade / 100.0) * self.equity
        
        # Size = risk_usd / stop_distance
        # –î–ª—è –ø–µ—Ä–ø–æ–≤ —Ä–∞–∑–º–µ—Ä –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (BTC, ETH, etc)
        size = risk_usd / stop_distance
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        position = {
            'market': market,
            'side': 'long' if signal.side == SignalSide.LONG else 'short',
            'entry': signal.entry,
            'stop': signal.stop,
            'targets': signal.targets,
            'size': size,
            'timestamp': timestamp,
            'risk_usd': risk_usd
        }
        
        self.positions[market] = position
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–¥–ª—è tracking)
        if hasattr(self.strategy, 'register_position'):
            self.strategy.register_position(market, position['side'])
    
    def close_position(
        self,
        market: str,
        exit_price: float,
        reason: str,
        timestamp: int
    ) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å P&L.
        
        market: –†—ã–Ω–æ–∫.
        exit_price: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è.
        reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ('stop_loss', 'target_hit', 'strategy_exit').
        timestamp: –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–¥–µ–ª–∫–µ –∏–ª–∏ None.
        """
        if market not in self.positions:
            return None
        
        position = self.positions[market]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        entry = position['entry']
        size = position['size']
        
        if position['side'] == 'long':
            # Long: P&L = (exit - entry) * size
            price_diff = exit_price - entry
        else:
            # Short: P&L = (entry - exit) * size
            price_diff = entry - exit_price
        
        # Gross P&L (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π)
        gross_pnl = price_diff * size
        
        # –ö–æ–º–∏—Å—Å–∏–∏: –Ω–∞ –≤—Ö–æ–¥ –∏ –Ω–∞ –≤—ã—Ö–æ–¥
        entry_cost = entry * size * self.fee_rate
        exit_cost = exit_price * size * self.fee_rate
        total_fees = entry_cost + exit_cost
        
        # Net P&L (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏)
        net_pnl = gross_pnl - total_fees
        
        # P&L –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ä–∏—Å–∫–∞
        pnl_r = net_pnl / position['risk_usd'] if position['risk_usd'] > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º equity
        self.equity += net_pnl
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            'market': market,
            'side': position['side'],
            'entry': entry,
            'exit': exit_price,
            'size': size,
            'pnl': net_pnl,
            'pnl_pct': (net_pnl / self.equity) * 100,
            'pnl_r': pnl_r,
            'fees': total_fees,
            'reason': reason,
            'entry_time': position['timestamp'],
            'exit_time': timestamp,
            'duration': timestamp - position['timestamp']
        }
        
        self.trades.append(trade)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del self.positions[market]
        
        # –£–±–∏—Ä–∞–µ–º –∏–∑ tracking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if hasattr(self.strategy, 'unregister_position'):
            self.strategy.unregister_position(market)
        
        return trade
    
    def _check_positions(self, ctx: BarContext):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ stop/target hits.
        
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ä–∞.
        """
        market = ctx.market
        if market not in self.positions:
            return
        
        position = self.positions[market]
        
        if position['side'] == 'long':
            # Long: –ø—Ä–æ–≤–µ—Ä—è–µ–º stop –∏ targets
            if ctx.low <= position['stop']:
                # Hit stop loss
                self.close_position(
                    market=market,
                    exit_price=position['stop'],
                    reason='stop_loss',
                    timestamp=ctx.timestamp
                )
            elif position['targets'] and ctx.high >= position['targets'][0]:
                # Hit first target
                self.close_position(
                    market=market,
                    exit_price=position['targets'][0],
                    reason='target_hit',
                    timestamp=ctx.timestamp
                )
        
        else:  # short
            # Short: –ø—Ä–æ–≤–µ—Ä—è–µ–º stop –∏ targets
            if ctx.high >= position['stop']:
                # Hit stop loss
                self.close_position(
                    market=market,
                    exit_price=position['stop'],
                    reason='stop_loss',
                    timestamp=ctx.timestamp
                )
            elif position['targets'] and ctx.low <= position['targets'][0]:
                # Hit first target
                self.close_position(
                    market=market,
                    exit_price=position['targets'][0],
                    reason='target_hit',
                    timestamp=ctx.timestamp
                )
    
    def _close_all_positions(self, last_bar: pd.Series, reason: str):
        """
        –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–≤ –∫–æ–Ω—Ü–µ backtest).
        
        last_bar: –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä –¥–∞–Ω–Ω—ã—Ö.
        reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è.
        """
        markets_to_close = list(self.positions.keys())
        for market in markets_to_close:
            self.close_position(
                market=market,
                exit_price=last_bar['close'],
                reason=reason,
                timestamp=int(last_bar['timestamp'].timestamp() * 1000)
            )
    
    def calculate_metrics(self) -> Dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏.
        """
        if not self.trades:
            return {
                'total_trades': 0,
                'winning_trades': 0,
                'losing_trades': 0,
                'win_rate': 0.0,
                'total_pnl': 0.0,
                'avg_win': 0.0,
                'avg_loss': 0.0,
                'profit_factor': 0.0,
                'max_drawdown': 0.0,
                'sharpe_ratio': 0.0,
                'final_equity': self.equity,
                'return_pct': 0.0
            }
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(self.trades)
        winning_trades = sum(1 for t in self.trades if t['pnl'] > 0)
        losing_trades = sum(1 for t in self.trades if t['pnl'] < 0)
        
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        
        # P&L –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = sum(t['pnl'] for t in self.trades)
        avg_win = np.mean([t['pnl'] for t in self.trades if t['pnl'] > 0]) if winning_trades > 0 else 0
        avg_loss = np.mean([t['pnl'] for t in self.trades if t['pnl'] < 0]) if losing_trades > 0 else 0
        
        # Sharpe Ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        pnl_series = np.array([t['pnl'] for t in self.trades])
        if len(pnl_series) > 1 and pnl_series.std() > 0:
            sharpe_ratio = (pnl_series.mean() / pnl_series.std()) * np.sqrt(252)  # Annualized
        else:
            sharpe_ratio = 0.0
        
        # Max Drawdown
        equity_array = np.array(self.equity_curve)
        running_max = np.maximum.accumulate(equity_array)
        drawdown = (equity_array - running_max) / running_max * 100
        max_drawdown = abs(drawdown.min())
        
        return {
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'losing_trades': losing_trades,
            'win_rate': win_rate,
            'total_pnl': total_pnl,
            'avg_win': avg_win,
            'avg_loss': avg_loss,
            'profit_factor': abs(avg_win / avg_loss) if avg_loss != 0 else 0,
            'max_drawdown': max_drawdown,
            'sharpe_ratio': sharpe_ratio,
            'final_equity': self.equity,
            'return_pct': ((self.equity - self.initial_capital) / self.initial_capital) * 100
        }

