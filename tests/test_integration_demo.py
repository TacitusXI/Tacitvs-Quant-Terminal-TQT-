"""
Integration Demo Test - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π Tortoise
2. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ Risk Manager
3. –†–∞—Å—á–µ—Ç EV —Å –ø–æ–ª–Ω—ã–º–∏ –∏–∑–¥–µ—Ä–∂–∫–∞–º–∏
4. –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: signal ‚Üí sizing ‚Üí EV check
"""

# ===== –ò–ú–ü–û–†–¢–´ =====

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
# Path(__file__) = –ø—É—Ç—å –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É (test_integration_demo.py)
# .parent = –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests/
# .parent.parent = –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tqt/
ROOT_DIR = Path(__file__).parent.parent
sys.path.insert(0, str(ROOT_DIR))

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from core.strategy.tortoise import TortoiseStrategy
from core.strategy.base import BarContext
from core.ev.ev_calculator import EVCalculator
from core.risk.risk_manager import RiskManager, RiskLimits

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
import pandas as pd
import numpy as np


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def generate_fake_history(days: int = 100) -> pd.DataFrame:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fake –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    –°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ OHLCV –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é.
    
    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    
    Returns:
        DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: timestamp, open, high, low, close, volume
    """
    # np.random.seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    np.random.seed(42)
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ BTC
    start_price = 40000.0
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (random walk —Å —Ç—Ä–µ–Ω–¥–æ–º)
    # np.random.randn() –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    # mean=0.0005 = –Ω–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (+0.05% –≤ –¥–µ–Ω—å)
    # std=0.02 = –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2% –≤ –¥–µ–Ω—å
    returns = np.random.randn(days) * 0.02 + 0.0005
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ cumulative product
    # (1 + returns) –¥–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    # .cumprod() = cumulative product (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
    # * start_price = —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É
    close_prices = start_price * (1 + returns).cumprod()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, close in enumerate(close_prices):
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º:
        
        # Open = –ø—Ä–µ–¥—ã–¥—É—â–∏–π close (–∏–ª–∏ start_price –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è)
        open_price = close_prices[i-1] if i > 0 else start_price
        
        # High/Low = close ¬± —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        # abs() —á—Ç–æ–±—ã –¥–∏–∞–ø–∞–∑–æ–Ω –±—ã–ª –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
        daily_range = abs(np.random.randn() * 0.015 * close)
        high = close + daily_range
        low = close - daily_range
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ open –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã high/low
        high = max(high, open_price, close)
        low = min(low, open_price, close)
        
        # Volume = —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–º
        volume = np.random.uniform(1000, 5000)
        
        # Timestamp = —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å N –¥–Ω–µ–π
        # 86400000 = –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –¥–Ω–µ
        timestamp = int((pd.Timestamp.now().timestamp() - (days - i) * 86400) * 1000)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data.append({
            'timestamp': timestamp,
            'open': open_price,
            'high': high,
            'low': low,
            'close': close,
            'volume': volume
        })
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
    df = pd.DataFrame(data)
    return df


def print_section(title: str):
    """
    –ü–µ—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏.
    
    Args:
        title: –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    """
    # "=" * 80 —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ 80 —Å–∏–º–≤–æ–ª–æ–≤ =
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80 + "\n")


# ===== MAIN DEMO =====

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    print_section("üöÄ TACITUS QUANT TERMINAL - Integration Demo")
    
    # ========================================
    # 1) –ì–ï–ù–ï–†–ê–¶–ò–Ø FAKE –î–ê–ù–ù–´–•
    # ========================================
    print_section("1Ô∏è‚É£  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    history = generate_fake_history(days=100)
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(history)} –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
    print(f"üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
    # .head(5) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ DataFrame
    # .to_string() –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    print(history.head(5).to_string())
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∏ (–¥–ª—è —Å–∏–≥–Ω–∞–ª–∞)
    # .iloc[-1] = –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
    # .iloc[-2] = –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
    last_bar = history.iloc[-1]
    prev_bar = history.iloc[-2]
    
    print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞:")
    print(f"   Close: ${last_bar['close']:.2f}")
    print(f"   High:  ${last_bar['high']:.2f}")
    print(f"   Low:   ${last_bar['low']:.2f}")
    
    # ========================================
    # 2) –°–û–ó–î–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò
    # ========================================
    print_section("2Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Tortoise")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    strategy = TortoiseStrategy({
        'don_break': 20,
        'don_exit': 10,
        'trail_atr_len': 20,
        'trail_mult': 2.0,
        'markets': ['BTC-PERP']
    })
    
    print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy}")
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   Breakout channel: {strategy.don_break} periods")
    print(f"   Exit channel:     {strategy.don_exit} periods")
    print(f"   ATR length:       {strategy.trail_atr_len} periods")
    
    # ========================================
    # 3) –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê
    # ========================================
    print_section("3Ô∏è‚É£  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
    ctx = BarContext(
        timestamp=int(last_bar['timestamp']),
        market='BTC-PERP',
        open=float(last_bar['open']),
        high=float(last_bar['high']),
        low=float(last_bar['low']),
        close=float(last_bar['close']),
        volume=float(last_bar['volume']),
        indicators={}
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
    signals = strategy.on_bar(ctx, history)
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞...")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    
    if not signals:
        print(f"‚ö†Ô∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–µ")
        print(f"   (–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å–∏–≥–Ω–∞–ª—ã —Ä–µ–¥–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)")
        print(f"\nüí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª...")
        
        # –°–æ–∑–¥–∞–µ–º fake —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from core.strategy.base import Signal, SignalSide
        
        fake_signal = Signal(
            market='BTC-PERP',
            side=SignalSide.LONG,
            entry=float(last_bar['close']),
            stop=float(last_bar['close']) * 0.95,  # –°—Ç–æ–ø -5%
            targets=[float(last_bar['close']) * 1.10],  # –¶–µ–ª—å +10%
            confidence=0.5,
            metadata={'reason': 'demo_signal'}
        )
        signals = [fake_signal]
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    signal = signals[0]
    
    print(f"\nüìä –°–ò–ì–ù–ê–õ –î–ï–¢–ê–õ–¨:")
    print(f"   Market:     {signal.market}")
    print(f"   Direction:  {signal.side.value.upper()}")
    print(f"   Entry:      ${signal.entry:.2f}")
    print(f"   Stop:       ${signal.stop:.2f}")
    print(f"   Target:     ${signal.targets[0]:.2f}")
    print(f"   Risk dist:  ${signal.risk_distance():.2f}")
    print(f"   Reward dist: ${signal.reward_distance():.2f}")
    print(f"   R:R ratio:  {signal.risk_reward_ratio():.2f}")
    
    # ========================================
    # 4) RISK MANAGEMENT & SIZING
    # ========================================
    print_section("4Ô∏è‚É£  Risk Management & Position Sizing")
    
    # –°–æ–∑–¥–∞–µ–º Risk Manager
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º equity = $10,000
    equity = 10000.0
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞
    limits = RiskLimits(
        per_trade_risk_pct=1.0,        # 1% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        max_daily_loss_r=5.0,          # –ú–∞–∫—Å–∏–º—É–º 5R —É–±—ã—Ç–∫–∞ –≤ –¥–µ–Ω—å
        max_concurrent_positions=3,     # –ú–∞–∫—Å–∏–º—É–º 3 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–∏
        max_position_size_usd=50000.0,  # –ú–∞–∫—Å–∏–º—É–º $50k –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        min_ev_net=0.0                  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π EV = 0 (break-even)
    )
    
    risk_mgr = RiskManager(equity=equity, limits=limits)
    
    print(f"üí∞ –ö–∞–ø–∏—Ç–∞–ª: ${equity:,.2f}")
    print(f"‚öôÔ∏è  –õ–∏–º–∏—Ç—ã:")
    print(f"   Risk per trade:  {limits.per_trade_risk_pct}%")
    print(f"   Daily loss limit: {limits.max_daily_loss_r}R")
    print(f"   Max positions:    {limits.max_concurrent_positions}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    size, r_usd = risk_mgr.calculate_position_size(
        entry_price=signal.entry,
        stop_price=signal.stop,
        contract_size=1.0  # –î–ª—è BTC-PERP contract_size –æ–±—ã—á–Ω–æ 1.0
    )
    
    print(f"\nüìê SIZING –†–ê–°–ß–ï–¢:")
    print(f"   Position size: {size:.4f} BTC")
    print(f"   Risk (1R):     ${r_usd:.2f}")
    print(f"   Notional:      ${size * signal.entry:,.2f}")
    print(f"   % of equity:   {(size * signal.entry / equity) * 100:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω EV_net (—Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –µ–≥–æ –¥–∞–ª–µ–µ, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.1)
    can_open, reason = risk_mgr.can_open_position(
        market=signal.market,
        size=size,
        entry_price=signal.entry,
        r_usd=r_usd,
        current_ev_net=0.1  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º EV_net = 0.1R (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π)
    )
    
    print(f"\nüö¶ –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í:")
    print(f"   Can open: {'‚úÖ YES' if can_open else '‚ùå NO'}")
    print(f"   Reason:   {reason}")
    
    # ========================================
    # 5) EV CALCULATION
    # ========================================
    print_section("5Ô∏è‚É£  Expected Value (EV) Calculation")
    
    # –°–æ–∑–¥–∞–µ–º EV calculator
    ev_calc = EVCalculator(
        default_maker_bps=-1.5,  # Maker rebate (–ø–æ–ª—É—á–∞–µ–º 0.015%)
        default_taker_bps=4.5    # Taker fee (–ø–ª–∞—Ç–∏–º 0.045%)
    )
    
    print(f"üíµ Fee structure:")
    print(f"   Maker: -1.5 bps (rebate)")
    print(f"   Taker: +4.5 bps (fee)")
    
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –±—ç–∫—Ç–µ—Å—Ç–∞
    # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ backtest —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    win_rate = 0.45          # 45% winrate
    avg_win_r = 2.5          # –í —Å—Ä–µ–¥–Ω–µ–º –±–µ—Ä–µ–º 2.5R –ø—Ä–∏–±—ã–ª–∏
    avg_loss_r = -1.0        # –ü—Ä–æ–∏–≥—Ä—ã—à–∏ –æ–±—ã—á–Ω–æ 1R (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–ø)
    
    # Notional –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
    notional = size * signal.entry
    
    # Hold time –¥–ª—è funding (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –¥–µ—Ä–∂–∏–º 1 –¥–µ–Ω—å = 24 —á–∞—Å–∞)
    hold_time_hours = 24.0
    
    # Funding rate (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º 0.01% –∑–∞ 8 —á–∞—Å–æ–≤)
    funding_rate = 0.0001
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EV
    ev_result = ev_calc.calculate_ev_result(
        win_rate=win_rate,
        avg_win_r=avg_win_r,
        avg_loss_r=avg_loss_r,
        notional_in=notional,
        notional_out=notional,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        fee_in_bps=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º default maker
        fee_out_bps=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º default maker
        funding_rate=funding_rate,
        hold_time_hours=hold_time_hours,
        slippage_bps=1.0,  # 1 bps slippage
        gas_usd=0.0,       # Hyperliquid = gasless
        r_usd=r_usd
    )
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò:")
    print(f"   Win rate:     {win_rate*100:.1f}%")
    print(f"   Avg win:      {avg_win_r:.2f}R")
    print(f"   Avg loss:     {avg_loss_r:.2f}R")
    
    print(f"\nüí∏ –ò–ó–î–ï–†–ñ–ö–ò (–≤ R-units):")
    print(f"   Fees:         {ev_result.fees_eff_r:+.4f}R  {'üìà rebate!' if ev_result.fees_eff_r < 0 else 'üìâ cost'}")
    print(f"   Funding:      {ev_result.funding_r:+.4f}R")
    print(f"   Slippage:     {ev_result.slippage_r:+.4f}R")
    print(f"   Gas:          {ev_result.gas_r:+.4f}R")
    print(f"   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print(f"   Total costs:  {ev_result.total_costs_r:+.4f}R")
    
    print(f"\nüéØ EXPECTED VALUE:")
    print(f"   EV gross:     {ev_result.ev_gross:+.4f}R")
    print(f"   EV net:       {ev_result.ev_net:+.4f}R")
    print(f"   Tradeable:    {'‚úÖ YES' if ev_result.is_tradeable() else '‚ùå NO'}")
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è EV_net
    if ev_result.ev_net > 0:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        expected_profit_per_trade = ev_result.ev_net * r_usd
        print(f"\n‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ü–†–ò–ë–´–õ–¨–ù–ê!")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${expected_profit_per_trade:.2f}")
        print(f"   –ü—Ä–∏ 100 —Å–¥–µ–ª–∫–∞—Ö: ${expected_profit_per_trade * 100:,.2f}")
    else:
        expected_loss_per_trade = ev_result.ev_net * r_usd
        print(f"\n‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –£–ë–´–¢–û–ß–ù–ê!")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —É–±—ã—Ç–æ–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${expected_loss_per_trade:.2f}")
        print(f"   –ù–ï –¢–û–†–ì–û–í–ê–¢–¨!")
    
    # ========================================
    # 6) –†–ï–ó–Æ–ú–ï
    # ========================================
    print_section("6Ô∏è‚É£  –†–µ–∑—é–º–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    print(f"üìã TRADE SETUP:")
    print(f"   Market:       {signal.market}")
    print(f"   Direction:    {signal.side.value.upper()}")
    print(f"   Entry:        ${signal.entry:.2f}")
    print(f"   Stop:         ${signal.stop:.2f}")
    print(f"   Target (2R):  ${signal.targets[0]:.2f}")
    print(f"   Size:         {size:.4f} BTC")
    print(f"   Risk:         ${r_usd:.2f} ({limits.per_trade_risk_pct}% of equity)")
    
    print(f"\nüí° DECISION:")
    if can_open and ev_result.is_tradeable():
        print(f"   ‚úÖ –ú–û–ñ–ù–û –û–¢–ö–†–´–í–ê–¢–¨ –ü–û–ó–ò–¶–ò–Æ")
        print(f"   üìä EV_net = {ev_result.ev_net:.4f}R > 0")
        print(f"   üö¶ –í—Å–µ risk limits OK")
    elif not can_open:
        print(f"   ‚ùå –ù–ï–õ–¨–ó–Ø –û–¢–ö–†–´–í–ê–¢–¨ –ü–û–ó–ò–¶–ò–Æ")
        print(f"   üö´ Risk limit: {reason}")
    elif not ev_result.is_tradeable():
        print(f"   ‚ùå –ù–ï–õ–¨–ó–Ø –û–¢–ö–†–´–í–ê–¢–¨ –ü–û–ó–ò–¶–ò–Æ")
        print(f"   üìâ EV_net = {ev_result.ev_net:.4f}R ‚â§ 0")
    
    print_section("‚úÖ Demo –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    print(f"\nüìö –ß—Ç–æ –º—ã –ø–æ–∫–∞–∑–∞–ª–∏:")
    print(f"   1. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"   2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Tortoise")
    print(f"   3. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print(f"   4. ‚úÖ Risk Management & Position Sizing (1% R)")
    print(f"   5. ‚úÖ EV —Ä–∞—Å—á–µ—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –∏–∑–¥–µ—Ä–∂–∫–∞–º–∏")
    print(f"   6. ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Signal ‚Üí Sizing ‚Üí EV check ‚Üí Decision")
    
    print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   - –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Hyperliquid")
    print(f"   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π backtest engine")
    print(f"   - –î–æ–±–∞–≤–∏—Ç—å Walk-Forward –∏ Monte Carlo")
    print(f"   - –°–æ–∑–¥–∞—Ç—å UI –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")


# ===== –ó–ê–ü–£–°–ö =====

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º main —Ñ—É–Ω–∫—Ü–∏—é
    main()

