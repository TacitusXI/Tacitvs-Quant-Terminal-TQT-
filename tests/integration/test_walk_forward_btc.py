"""
Integration test: Walk-Forward —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ BTC –¥–∞–Ω–Ω—ã–º–∏.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ö–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ train/test
- –†–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É anchored –∏ rolling
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é splits
"""

import pytest
from datetime import datetime


pytestmark = pytest.mark.integration


class TestWalkForwardBTC:
    """Walk-Forward analysis –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö BTC –¥–∞–Ω–Ω—ã—Ö."""
    
    @pytest.fixture(scope="class")
    def btc_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤ BTC –¥–∞–Ω–Ω—ã—Ö."""
        from core.data.manager import DataManager
        
        manager = DataManager()
        df = manager.get_candles(
            market='BTC-PERP',
            interval='1d',
            days_back=180
        )
        
        return df
    
    def test_rolling_window_splits_btc(self, btc_data):
        """
        –¢–µ—Å—Ç: Rolling window –Ω–∞ BTC –¥–∞–Ω–Ω—ã—Ö.
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è.
        """
        from core.research.walk_forward import WalkForwardSplitter
        
        print(f"\nüìä BTC –¥–∞–Ω–Ω—ã—Ö: {len(btc_data)} –¥–Ω–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {btc_data['timestamp'].iloc[0].date()} - {btc_data['timestamp'].iloc[-1].date()}")
        
        # –°–æ–∑–¥–∞–µ–º splitter
        splitter = WalkForwardSplitter(
            train_days=90,   # 3 –º–µ—Å—è—Ü–∞ –æ–±—É—á–µ–Ω–∏—è
            test_days=30,    # 1 –º–µ—Å—è—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            step_days=30,    # –°–¥–≤–∏–≥ –Ω–∞ 1 –º–µ—Å—è—Ü
            anchored=False   # Rolling window
        )
        
        print(f"\nüìê Splitter: {splitter}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        splits = splitter.split(btc_data)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(splits)} splits")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        split_info = splitter.get_split_info(splits)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º split
        print(f"\n{'='*70}")
        print(f"{'Split':<8} {'Train Period':<30} {'Test Period':<30}")
        print(f"{'='*70}")
        
        for info in split_info:
            train_period = f"{info['train_start'].date()} - {info['train_end'].date()}"
            test_period = f"{info['test_start'].date()} - {info['test_end'].date()}"
            print(f"#{info['split_id']:<7} {train_period:<30} {test_period:<30}")
        
        print(f"{'='*70}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(splits) > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω split"
        
        # –ö–∞–∂–¥—ã–π split –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        for split in splits:
            assert len(split['train']) == 90, "Train –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 90 –¥–Ω–µ–π"
            assert len(split['test']) == 30, "Test –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 30 –¥–Ω–µ–π"
        
        print(f"\n‚úÖ –í—Å–µ splits –≤–∞–ª–∏–¥–Ω—ã!")
    
    def test_anchored_window_splits_btc(self, btc_data):
        """
        –¢–µ—Å—Ç: Anchored window –Ω–∞ BTC –¥–∞–Ω–Ω—ã—Ö.
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ train window —Ä–∞—Å—Ç–µ—Ç.
        """
        from core.research.walk_forward import WalkForwardSplitter
        
        print(f"\nüìä Anchored Window Analysis")
        
        splitter = WalkForwardSplitter(
            train_days=90,
            test_days=30,
            step_days=30,
            anchored=True    # Anchored mode
        )
        
        splits = splitter.split(btc_data)
        split_info = splitter.get_split_info(splits)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(splits)} anchored splits")
        print(f"\n{'='*80}")
        print(f"{'Split':<8} {'Train Size':<12} {'Train Period':<35} {'Test Period':<20}")
        print(f"{'='*80}")
        
        for info in split_info:
            train_period = f"{info['train_start'].date()} - {info['train_end'].date()}"
            test_period = f"{info['test_start'].date()} - {info['test_end'].date()}"
            print(f"#{info['split_id']:<7} {info['train_size']:<12} {train_period:<35} {test_period:<20}")
        
        print(f"{'='*80}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ train —Ä–∞—Å—Ç–µ—Ç
        if len(splits) >= 2:
            first_train_size = len(splits[0]['train'])
            second_train_size = len(splits[1]['train'])
            
            assert second_train_size > first_train_size, "Anchored train –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏"
            print(f"\n‚úÖ Train window —Ä–∞—Å—Ç–µ—Ç: {first_train_size} ‚Üí {second_train_size} –¥–Ω–µ–π")
    
    def test_compare_modes(self, btc_data):
        """
        –¢–µ—Å—Ç: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Rolling vs Anchored.
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏.
        """
        from core.research.walk_forward import WalkForwardSplitter
        
        print(f"\nüî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Rolling vs Anchored")
        
        # Rolling
        rolling_splitter = WalkForwardSplitter(
            train_days=90, test_days=30, step_days=30, anchored=False
        )
        rolling_splits = rolling_splitter.split(btc_data)
        
        # Anchored
        anchored_splitter = WalkForwardSplitter(
            train_days=90, test_days=30, step_days=30, anchored=True
        )
        anchored_splits = anchored_splitter.split(btc_data)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   Rolling:  {len(rolling_splits)} splits")
        print(f"   Anchored: {len(anchored_splits)} splits")
        
        print(f"\nüìà –†–∞–∑–º–µ—Ä—ã train windows:")
        print(f"   Rolling:  –≤—Å–µ –ø–æ {len(rolling_splits[0]['train'])} –¥–Ω–µ–π")
        print(f"   Anchored: –æ—Ç {len(anchored_splits[0]['train'])} –¥–æ {len(anchored_splits[-1]['train'])} –¥–Ω–µ–π")
        
        # Rolling –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä train
        rolling_train_sizes = [len(s['train']) for s in rolling_splits]
        assert len(set(rolling_train_sizes)) == 1, "Rolling train –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
        
        # Anchored —Ä–∞—Å—Ç–µ—Ç
        anchored_train_sizes = [len(s['train']) for s in anchored_splits]
        assert anchored_train_sizes == sorted(anchored_train_sizes), "Anchored train –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏"
        
        print(f"\n‚úÖ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

