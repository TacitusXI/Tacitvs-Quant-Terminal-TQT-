"""
Integration test –¥–ª—è DataManager —Å —Ä–µ–∞–ª—å–Ω—ã–º Hyperliquid API.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π workflow:
- –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä—ã–Ω–∫–∞–º–∏
"""

import pytest
import pandas as pd
from datetime import datetime, timedelta
import tempfile
import shutil
from pathlib import Path


pytestmark = pytest.mark.integration


class TestDataManagerReal:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã DataManager —Å —Ä–µ–∞–ª—å–Ω—ã–º API.
    """
    
    @pytest.fixture(scope="class")
    def temp_storage_dir(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        temp_path = tempfile.mkdtemp()
        yield temp_path
        shutil.rmtree(temp_path)
    
    @pytest.fixture(scope="class")
    def manager(self, temp_storage_dir):
        """DataManager —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º storage."""
        from core.data.hyperliquid_client import HyperliquidClient
        from core.data.fetcher import DataFetcher
        from core.data.storage import DataStorage
        from core.data.manager import DataManager
        
        client = HyperliquidClient()
        fetcher = DataFetcher(client)
        storage = DataStorage(base_path=temp_storage_dir)
        
        return DataManager(client=client, fetcher=fetcher, storage=storage)
    
    def test_get_candles_first_time(self, manager):
        """
        –¢–µ—Å—Ç: –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
        
        –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ª–∂–Ω—ã:
        1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å API
        2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ storage
        3. –í–µ—Ä–Ω—É—Ç—å DataFrame
        """
        print("\nüîÑ –¢–µ—Å—Ç: –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ BTC...")
        
        df = manager.get_candles(
            market='BTC-PERP',
            interval='1d',
            days_back=7
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert isinstance(df, pd.DataFrame)
        assert not df.empty
        assert len(df) >= 6  # –ú–∏–Ω–∏–º—É–º 6 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        expected_cols = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        assert all(col in df.columns for col in expected_cols)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    
    def test_get_candles_from_cache(self, manager):
        """
        –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞.
        
        –ü—Ä–∏ –≤—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ storage
        (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º —Å API).
        """
        print("\nüì¶ –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞...")
        
        # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Å API)
        df1 = manager.get_candles(market='BTC-PERP', interval='1d', days_back=7)
        
        # –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–∏–∑ –∫—ç—à–∞)
        df2 = manager.get_candles(market='BTC-PERP', interval='1d', days_back=7)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
        assert len(df1) == len(df2)
        pd.testing.assert_frame_equal(df1, df2)
        
        print(f"‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç, {len(df2)} —Å–≤–µ—á–µ–π")
    
    def test_get_candles_force_refresh(self, manager):
        """
        –¢–µ—Å—Ç: force_refresh –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        
        –° force_refresh=True –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å API.
        """
        print("\nüîÑ –¢–µ—Å—Ç: force_refresh...")
        
        df = manager.get_candles(
            market='BTC-PERP',
            interval='1d',
            days_back=7,
            force_refresh=True
        )
        
        assert not df.empty
        assert len(df) >= 6
        
        print(f"‚úÖ Force refresh —Ä–∞–±–æ—Ç–∞–µ—Ç, {len(df)} —Å–≤–µ—á–µ–π")
    
    def test_get_multiple_markets(self, manager):
        """
        –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—ã–Ω–∫–æ–≤.
        
        –î–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤.
        """
        print("\nüìä –¢–µ—Å—Ç: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏...")
        
        markets = ['BTC-PERP', 'ETH-PERP']
        result = manager.get_multiple_markets(
            markets=markets,
            interval='1d',
            days_back=7
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(result) == 2
        assert 'BTC-PERP' in result
        assert 'ETH-PERP' in result
        
        for market, df in result.items():
            assert not df.empty
            assert len(df) >= 6
            print(f"  {market}: {len(df)} —Å–≤–µ—á–µ–π")
        
        print("‚úÖ –í—Å–µ —Ä—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    def test_update_candles(self, manager):
        """
        –¢–µ—Å—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
        
        –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ 30 –¥–Ω–µ–π), –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º
        –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
        """
        print("\nüîÑ –¢–µ—Å—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 14 –¥–Ω–µ–π
        end_date_old = datetime.now() - timedelta(days=7)
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ "–≤ –ø—Ä–æ—à–ª–æ–º"
        from core.data.hyperliquid_client import HyperliquidClient
        from core.data.fetcher import DataFetcher
        
        client = HyperliquidClient()
        fetcher = DataFetcher(client)
        
        start_date_old = end_date_old - timedelta(days=14)
        old_df = fetcher.fetch_historical(
            market='SOL-PERP',
            interval='1d',
            start_date=start_date_old,
            end_date=end_date_old,
            validate=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        manager.storage.save(df=old_df, market='SOL-PERP', interval='1d')
        
        print(f"  –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(old_df)} —Å–≤–µ—á–µ–π –¥–æ {end_date_old.date()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        updated_df = manager.update_candles(
            market='SOL-PERP',
            interval='1d',
            end_date=datetime.now()
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(updated_df) > len(old_df), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(updated_df)} —Å–≤–µ—á–µ–π")
        print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(updated_df) - len(old_df)} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
        
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_list_available(self, manager):
        """
        –¢–µ—Å—Ç: list_available –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        """
        print("\nüìã –¢–µ—Å—Ç: list_available...")
        
        available = manager.list_available()
        
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ datasets: {len(available)}")
        for dataset in available:
            print(f"    - {dataset}")
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∏–Ω–∏–º—É–º BTC, ETH, SOL (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        assert len(available) >= 3
        
        print("‚úÖ list_available —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_complete_workflow(self, manager):
        """
        –¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π workflow –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞.
        
        1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        3. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        4. –û–±–Ω–æ–≤–∏—Ç—å
        5. –£–¥–∞–ª–∏—Ç—å
        """
        print("\nüöÄ –¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π workflow –¥–ª—è AVAX-PERP...")
        
        market = 'AVAX-PERP'
        interval = '1d'
        
        # Step 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å
        print("  1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        df1 = manager.get_candles(market=market, interval=interval, days_back=7)
        assert not df1.empty
        print(f"     ‚úÖ {len(df1)} —Å–≤–µ—á–µ–π")
        
        # Step 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        print("  2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ storage...")
        available = manager.list_available()
        assert f'{market}/{interval}' in available
        print("     ‚úÖ –î–∞–Ω–Ω—ã–µ –≤ storage")
        
        # Step 3: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        print("  3Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞...")
        df2 = manager.get_candles(market=market, interval=interval, days_back=7)
        assert len(df1) == len(df2)
        print("     ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # Step 4: –£–¥–∞–ª–∏—Ç—å
        print("  4Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        deleted = manager.delete(market=market, interval=interval)
        assert deleted is True
        available_after = manager.list_available()
        assert f'{market}/{interval}' not in available_after
        print("     ‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüéâ –ü–æ–ª–Ω—ã–π workflow —É—Å–ø–µ—à–µ–Ω!")

