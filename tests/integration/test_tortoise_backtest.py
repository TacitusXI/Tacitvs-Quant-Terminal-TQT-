"""
Integration test: Tortoise Strategy + Real Data + Backtesting.

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC/ETH —á–µ—Ä–µ–∑ DataManager
2. –°–æ–∑–¥–∞–Ω–∏–µ Tortoise strategy
3. Backtesting –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import pytest
import pandas as pd
from datetime import datetime, timedelta


pytestmark = pytest.mark.integration


class TestTortoiseBacktest:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Tortoise strategy –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    
    @pytest.fixture(scope="class")
    def btc_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö BTC –¥–∞–Ω–Ω—ã—Ö."""
        from core.data.manager import DataManager
        
        manager = DataManager()
        df = manager.get_candles(
            market='BTC-PERP',
            interval='1d',
            days_back=180,  # 6 –º–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            force_refresh=True  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        )
        
        return df
    
    @pytest.fixture(scope="class")
    def eth_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö ETH –¥–∞–Ω–Ω—ã—Ö."""
        from core.data.manager import DataManager
        
        manager = DataManager()
        df = manager.get_candles(
            market='ETH-PERP',
            interval='1d',
            days_back=90
        )
        
        return df
    
    def test_tortoise_btc_backtest(self, btc_data):
        """
        –¢–µ—Å—Ç: Tortoise strategy –Ω–∞ BTC (3 –º–µ—Å—è—Ü–∞).
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ:
        - Strategy –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
        - Backtest –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        - –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
        """
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        print("\nüìä BTC Tortoise Backtest")
        print(f"   –î–∞–Ω–Ω—ã–µ: {len(btc_data)} –¥–Ω–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {btc_data['timestamp'].iloc[0].date()} - {btc_data['timestamp'].iloc[-1].date()}")
        
        # –°–æ–∑–¥–∞–µ–º strategy
        strategy = TortoiseStrategy({
            'don_break': 20,
            'don_exit': 10,
            'trail_atr_len': 20,
            'trail_mult': 2.0,
            'markets': ['BTC-PERP']
        })
        
        # –°–æ–∑–¥–∞–µ–º backtest engine
        engine = BacktestEngine(
            strategy=strategy,
            initial_capital=10000.0,
            risk_per_trade=1.0  # 1% —Ä–∏—Å–∫
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
        results = engine.run_backtest(
            market='BTC-PERP',
            history=btc_data
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert 'trades' in results
        assert 'metrics' in results
        assert 'equity_curve' in results
        
        metrics = results['metrics']
        
        # Backtest –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        # (—Å–∏–≥–Ω–∞–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–ª–∏ –Ω–µ –±—ã—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–∫–∞)
        assert metrics['total_trades'] >= 0, "Backtest –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã
        assert 0 <= metrics['win_rate'] <= 100
        assert isinstance(metrics['total_pnl'], (int, float))
        assert metrics['max_drawdown'] >= 0
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã BTC:")
        print(f"   –°–¥–µ–ª–æ–∫: {metrics['total_trades']}")
        
        if metrics['total_trades'] > 0:
            print(f"   Win Rate: {metrics['win_rate']:.1f}%")
            print(f"   Total P&L: ${metrics['total_pnl']:.2f}")
            print(f"   Return: {metrics['return_pct']:.2f}%")
            print(f"   Max DD: {metrics['max_drawdown']:.2f}%")
            print(f"   Sharpe: {metrics['sharpe_ratio']:.2f}")
            print(f"   Avg Win: ${metrics['avg_win']:.2f}")
            print(f"   Avg Loss: ${metrics['avg_loss']:.2f}")
            print(f"   Profit Factor: {metrics['profit_factor']:.2f}")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ (–±–æ–∫–æ–≤–∏–∫ –±–µ–∑ –ø—Ä–æ—Ä—ã–≤–æ–≤)")
    
    def test_tortoise_eth_backtest(self, eth_data):
        """
        –¢–µ—Å—Ç: Tortoise strategy –Ω–∞ ETH (3 –º–µ—Å—è—Ü–∞).
        """
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        print("\nüìä ETH Tortoise Backtest")
        print(f"   –î–∞–Ω–Ω—ã–µ: {len(eth_data)} –¥–Ω–µ–π")
        
        strategy = TortoiseStrategy({
            'don_break': 20,
            'don_exit': 10,
            'markets': ['ETH-PERP']
        })
        
        engine = BacktestEngine(
            strategy=strategy,
            initial_capital=10000.0,
            risk_per_trade=1.0
        )
        
        results = engine.run_backtest('ETH-PERP', eth_data)
        
        metrics = results['metrics']
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ETH:")
        print(f"   –°–¥–µ–ª–æ–∫: {metrics['total_trades']}")
        
        if metrics['total_trades'] > 0:
            print(f"   Win Rate: {metrics['win_rate']:.1f}%")
            print(f"   Total P&L: ${metrics['total_pnl']:.2f}")
            print(f"   Return: {metrics['return_pct']:.2f}%")
            print(f"   Max DD: {metrics['max_drawdown']:.2f}%")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        assert metrics['total_trades'] >= 0
        assert isinstance(metrics['final_equity'], (int, float))
    
    def test_tortoise_parameter_comparison(self, btc_data):
        """
        –¢–µ—Å—Ç: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Tortoise.
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        """
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        print("\nüî¨ Parameter Comparison Test")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã breakout –∫–∞–Ω–∞–ª–∞
        params_sets = [
            {'don_break': 10, 'label': '10-period'},
            {'don_break': 20, 'label': '20-period'},
            {'don_break': 30, 'label': '30-period'}
        ]
        
        results_comparison = []
        
        for params_set in params_sets:
            strategy = TortoiseStrategy({
                'don_break': params_set['don_break'],
                'don_exit': 10,
                'markets': ['BTC-PERP']
            })
            
            engine = BacktestEngine(
                strategy=strategy,
                initial_capital=10000.0,
                risk_per_trade=1.0
            )
            
            results = engine.run_backtest('BTC-PERP', btc_data)
            metrics = results['metrics']
            
            results_comparison.append({
                'label': params_set['label'],
                'trades': metrics['total_trades'],
                'win_rate': metrics['win_rate'],
                'return': metrics['return_pct'],
                'max_dd': metrics['max_drawdown']
            })
            
            print(f"\n   {params_set['label']}:")
            print(f"     Trades: {metrics['total_trades']}")
            print(f"     Win Rate: {metrics['win_rate']:.1f}%")
            print(f"     Return: {metrics['return_pct']:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è
        # (—Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        trades_counts = [r['trades'] for r in results_comparison]
        assert len(set(trades_counts)) > 1, "–†–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"
        
        print(f"\n‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    def test_equity_curve_analysis(self, btc_data):
        """
        –¢–µ—Å—Ç: –∞–Ω–∞–ª–∏–∑ equity curve.
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ equity curve –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞.
        """
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        print("\nüìà Equity Curve Analysis")
        
        strategy = TortoiseStrategy({
            'don_break': 20,
            'don_exit': 10,
            'markets': ['BTC-PERP']
        })
        
        engine = BacktestEngine(
            strategy=strategy,
            initial_capital=10000.0,
            risk_per_trade=1.0
        )
        
        results = engine.run_backtest('BTC-PERP', btc_data)
        
        equity_curve = results['equity_curve']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(equity_curve) > 0
        assert equity_curve[0] == 10000.0  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å initial_capital
        
        # Equity curve –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if results['metrics']['total_trades'] > 0:
            # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∫–∏, equity –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è
            unique_values = len(set(equity_curve))
            assert unique_values > 1, "Equity –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–¥–µ–ª–æ–∫"
        
        print(f"   Initial: ${equity_curve[0]:,.2f}")
        print(f"   Final: ${equity_curve[-1]:,.2f}")
        print(f"   Min: ${min(equity_curve):,.2f}")
        print(f"   Max: ${max(equity_curve):,.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ final equity —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å metrics
        assert abs(equity_curve[-1] - results['metrics']['final_equity']) < 0.01
    
    def test_trade_details_analysis(self, btc_data):
        """
        –¢–µ—Å—Ç: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫.
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö.
        """
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        print("\nüìä Trade Details Analysis")
        
        strategy = TortoiseStrategy({
            'don_break': 20,
            'don_exit': 10,
            'markets': ['BTC-PERP']
        })
        
        engine = BacktestEngine(
            strategy=strategy,
            initial_capital=10000.0,
            risk_per_trade=1.0
        )
        
        results = engine.run_backtest('BTC-PERP', btc_data)
        
        trades = results['trades']
        
        if len(trades) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏
            first_trade = trades[0]
            
            required_keys = ['market', 'side', 'entry', 'exit', 'pnl', 'reason']
            for key in required_keys:
                assert key in first_trade, f"–°–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å {key}"
            
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
            print(f"\n   –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞:")
            print(f"     Side: {first_trade['side']}")
            print(f"     Entry: ${first_trade['entry']:.2f}")
            print(f"     Exit: ${first_trade['exit']:.2f}")
            print(f"     P&L: ${first_trade['pnl']:.2f}")
            print(f"     Reason: {first_trade['reason']}")
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
            winners = [t for t in trades if t['pnl'] > 0]
            losers = [t for t in trades if t['pnl'] < 0]
            
            print(f"\n   Winners: {len(winners)}")
            print(f"   Losers: {len(losers)}")
            
            if winners:
                avg_win = sum(t['pnl'] for t in winners) / len(winners)
                print(f"   Avg Win: ${avg_win:.2f}")
            
            if losers:
                avg_loss = sum(t['pnl'] for t in losers) / len(losers)
                print(f"   Avg Loss: ${avg_loss:.2f}")

