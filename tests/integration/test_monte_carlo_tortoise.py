"""
Integration test: Monte Carlo –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö Tortoise —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.

–ó–∞–ø—É—Å–∫–∞–µ–º MC simulation –Ω–∞:
- –†–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –æ—Ç Tortoise backtest
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ outcomes
- –û—Ü–µ–Ω–∏–≤–∞–µ–º risk of ruin
"""

import pytest


pytestmark = pytest.mark.integration


class TestMonteCarloTortoise:
    """Monte Carlo analysis –Ω–∞ Tortoise —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    
    @pytest.fixture(scope="class")
    def tortoise_trades(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç Tortoise backtest –Ω–∞ BTC.
        """
        from core.data.manager import DataManager
        from core.strategy.tortoise import TortoiseStrategy
        from core.backtest.engine import BacktestEngine
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º BTC –¥–∞–Ω–Ω—ã–µ
        manager = DataManager()
        df = manager.get_candles(
            market='BTC-PERP',
            interval='1d',
            days_back=180
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        params = {
            'markets': ['BTC-PERP'],
            'don_break': 20,
            'don_exit': 10
        }
        strategy = TortoiseStrategy(params)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
        engine = BacktestEngine(
            strategy=strategy,
            initial_capital=10000.0,
            risk_per_trade=1.0
        )
        
        results = engine.run_backtest('BTC-PERP', df)
        
        return results['trades']
    
    def test_monte_carlo_on_tortoise_trades(self, tortoise_trades):
        """
        –¢–µ—Å—Ç: Monte Carlo simulation –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö Tortoise —Å–¥–µ–ª–∫–∞—Ö.
        """
        from core.research.monte_carlo import MonteCarloSimulator
        
        print(f"\n{'='*70}")
        print(f"üé≤ MONTE CARLO SIMULATION: Tortoise –Ω–∞ BTC")
        print(f"{'='*70}")
        
        print(f"\nüìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(tortoise_trades)}")
        
        if len(tortoise_trades) == 0:
            print(f"   ‚ö†Ô∏è  –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            pytest.skip("No trades available for Monte Carlo")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = sum(t['pnl'] for t in tortoise_trades)
        winning_trades = sum(1 for t in tortoise_trades if t['pnl'] > 0)
        
        print(f"   Total P&L: ${total_pnl:.2f}")
        print(f"   Winning trades: {winning_trades}/{len(tortoise_trades)}")
        
        # –°–æ–∑–¥–∞–µ–º simulator
        simulator = MonteCarloSimulator(
            n_simulations=1000,
            initial_capital=10000.0,
            seed=42  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        )
        
        print(f"\nüé≤ Simulator: {simulator}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º simulation
        results = simulator.run_simulation(tortoise_trades)
        
        stats = results['stats']
        
        print(f"\n{'='*70}")
        print(f"üìà MONTE CARLO –†–ï–ó–£–õ–¨–¢–ê–¢–´ (1000 —Å–∏–º—É–ª—è—Ü–∏–π)")
        print(f"{'='*70}")
        
        print(f"\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        print(f"   Probability of Profit: {stats['prob_profit']:.1%}")
        print(f"   Probability of Loss:   {(1 - stats['prob_profit']):.1%}")
        
        print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Returns:")
        print(f"   Median:     {stats['median_return']:>8.2f}%")
        print(f"   Mean:       {stats['mean_return']:>8.2f}%")
        print(f"   Best Case:  {stats['best_case_return']:>8.2f}%")
        print(f"   Worst Case: {stats['worst_case_return']:>8.2f}%")
        
        print(f"\nüí∞ Final Equity:")
        print(f"   Median: ${stats['median_final_equity']:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ percentiles
        percentiles = results['percentiles']
        
        print(f"\nüìâ Percentile Analysis:")
        print(f"   P5  (5%):  ${percentiles['p5'][-1]:.2f}")
        print(f"   P25 (25%): ${percentiles['p25'][-1]:.2f}")
        print(f"   P50 (50%): ${percentiles['p50'][-1]:.2f}")
        print(f"   P75 (75%): ${percentiles['p75'][-1]:.2f}")
        print(f"   P95 (95%): ${percentiles['p95'][-1]:.2f}")
        
        # Risk of Ruin analysis
        ruin_threshold = 8000  # -20% –æ—Ç $10k
        ruin_count = sum(1 for sim in results['simulations'] 
                        if sim['final_equity'] < ruin_threshold)
        risk_of_ruin = ruin_count / len(results['simulations']) * 100
        
        print(f"\n‚ö†Ô∏è  Risk of Ruin (< $8000):")
        print(f"   {risk_of_ruin:.1f}% —Å–∏–º—É–ª—è—Ü–∏–π —É–ø–∞–ª–∏ –Ω–∏–∂–µ -20%")
        
        print(f"\n{'='*70}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(results['simulations']) == 1000
        assert 0 <= stats['prob_profit'] <= 1
        assert stats['worst_case_return'] <= stats['median_return'] <= stats['best_case_return']
    
    def test_monte_carlo_percentile_spread(self, tortoise_trades):
        """
        –¢–µ—Å—Ç: –ê–Ω–∞–ª–∏–∑ spread –º–µ–∂–¥—É percentiles.
        
        –ë–æ–ª—å—à–æ–π spread = –≤—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å.
        """
        from core.research.monte_carlo import MonteCarloSimulator
        
        if len(tortoise_trades) == 0:
            pytest.skip("No trades for analysis")
        
        print(f"\n{'='*70}")
        print(f"üìä PERCENTILE SPREAD ANALYSIS")
        print(f"{'='*70}")
        
        simulator = MonteCarloSimulator(n_simulations=1000, seed=42)
        results = simulator.run_simulation(tortoise_trades)
        
        percentiles = results['percentiles']
        
        # Spread –º–µ–∂–¥—É p5 –∏ p95
        final_p5 = percentiles['p5'][-1]
        final_p95 = percentiles['p95'][-1]
        spread = final_p95 - final_p5
        spread_pct = (spread / 10000) * 100
        
        print(f"\nüìè P5-P95 Spread:")
        print(f"   P5:     ${final_p5:.2f}")
        print(f"   P95:    ${final_p95:.2f}")
        print(f"   Spread: ${spread:.2f} ({spread_pct:.1f}%)")
        
        if spread_pct > 20:
            print(f"\n   ‚ö†Ô∏è  HIGH UNCERTAINTY: Spread > 20%")
        else:
            print(f"\n   ‚úÖ Moderate uncertainty")
        
        # Interquartile range (p25-p75)
        iqr = percentiles['p75'][-1] - percentiles['p25'][-1]
        iqr_pct = (iqr / 10000) * 100
        
        print(f"\nüì¶ Interquartile Range (IQR):")
        print(f"   P25:    ${percentiles['p25'][-1]:.2f}")
        print(f"   P75:    ${percentiles['p75'][-1]:.2f}")
        print(f"   IQR:    ${iqr:.2f} ({iqr_pct:.1f}%)")
        
        print(f"\n‚úÖ Spread analysis complete!")
    
    def test_monte_carlo_vs_original_backtest(self, tortoise_trades):
        """
        –¢–µ—Å—Ç: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ MC median —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º backtest —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        
        MC median –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É (–≤ —Å—Ä–µ–¥–Ω–µ–º).
        """
        from core.research.monte_carlo import MonteCarloSimulator
        
        if len(tortoise_trades) == 0:
            pytest.skip("No trades for analysis")
        
        print(f"\n{'='*70}")
        print(f"üÜö MONTE CARLO vs ORIGINAL BACKTEST")
        print(f"{'='*70}")
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        original_pnl = sum(t['pnl'] for t in tortoise_trades)
        original_return = (original_pnl / 10000) * 100
        original_final = 10000 + original_pnl
        
        print(f"\nüìä Original Backtest:")
        print(f"   P&L:    ${original_pnl:.2f}")
        print(f"   Return: {original_return:.2f}%")
        print(f"   Final:  ${original_final:.2f}")
        
        # Monte Carlo median
        simulator = MonteCarloSimulator(n_simulations=1000, seed=42)
        results = simulator.run_simulation(tortoise_trades)
        
        mc_median_return = results['stats']['median_return']
        mc_median_equity = results['stats']['median_final_equity']
        
        print(f"\nüé≤ Monte Carlo Median (1000 sims):")
        print(f"   Return: {mc_median_return:.2f}%")
        print(f"   Final:  ${mc_median_equity:.2f}")
        
        # –†–∞–∑–Ω–∏—Ü–∞
        diff = abs(original_return - mc_median_return)
        
        print(f"\nüìè Difference:")
        print(f"   Return diff: {diff:.2f}%")
        
        # MC median –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç original –∏–∑-–∑–∞ shuffling
        # –ù–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–∏
        print(f"\nüí° Note: MC median –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ order effects")
        
        print(f"\n‚úÖ Comparison complete!")

