"""
Integration test –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ data pipeline.

–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HyperliquidClient
2. –û–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ DataFetcher
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DataStorage
4. –ó–∞–≥—Ä—É–∑–∫—É –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ Storage
"""

import pytest
import pandas as pd
from datetime import datetime, timedelta
import tempfile
import shutil
from pathlib import Path


pytestmark = pytest.mark.integration


class TestDataPipeline:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ data pipeline.
    """
    
    @pytest.fixture(scope="class")
    def temp_storage_dir(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        temp_path = tempfile.mkdtemp()
        yield temp_path
        # Cleanup –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        shutil.rmtree(temp_path)
    
    @pytest.fixture(scope="class")
    def client(self):
        """HyperliquidClient –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        from core.data.hyperliquid_client import HyperliquidClient
        return HyperliquidClient()
    
    @pytest.fixture(scope="class")
    def fetcher(self, client):
        """DataFetcher —Å —Ä–µ–∞–ª—å–Ω—ã–º client."""
        from core.data.fetcher import DataFetcher
        return DataFetcher(client)
    
    @pytest.fixture(scope="class")
    def storage(self, temp_storage_dir):
        """DataStorage —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π."""
        from core.data.storage import DataStorage
        return DataStorage(base_path=temp_storage_dir)
    
    def test_full_pipeline_btc(self, fetcher, storage):
        """
        –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline: fetch -> validate -> save -> load.
        
        –ó–∞–≥—Ä—É–∂–∞–µ–º 7 –¥–Ω–µ–π BTC –¥–∞–Ω–Ω—ã—Ö, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ.
        """
        print("\nüöÄ –ó–∞–ø—É—Å–∫ full data pipeline –¥–ª—è BTC...")
        
        # Step 1: Fetch data
        print("üì• Step 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Hyperliquid...")
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        df = fetcher.fetch_historical(
            market='BTC-PERP',
            interval='1d',
            start_date=start_date,
            end_date=end_date,
            validate=True  # –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        assert not df.empty, "DataFrame –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert len(df) >= 7, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 7 —Å–≤–µ—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {len(df)}"
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        
        # Step 2: Save data
        print("\nüíæ Step 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Parquet...")
        storage.save(df=df, market='BTC-PERP', interval='1d')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        assert storage.exists(market='BTC-PERP', interval='1d'), "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # Step 3: Load data
        print("\nüì§ Step 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Parquet...")
        loaded_df = storage.load(market='BTC-PERP', interval='1d')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        assert loaded_df is not None, "Loaded DataFrame –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert len(loaded_df) == len(df), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_df)} —Å–≤–µ—á–µ–π")
        
        # Step 4: Verify data integrity
        print("\nüîç Step 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        expected_cols = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        assert all(col in loaded_df.columns for col in expected_cols), "–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        assert pd.api.types.is_datetime64_any_dtype(loaded_df['timestamp']), "timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å datetime"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        assert (loaded_df['close'] > 0).all(), "–í—Å–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏"
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
        
        # Step 5: Display sample
        print("\nüìä Sample –¥–∞–Ω–Ω—ã—Ö:")
        print(loaded_df.head(3))
        
        print("\nüéâ Full pipeline —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    def test_multiple_markets_and_intervals(self, fetcher, storage):
        """
        –¢–µ—Å—Ç pipeline –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        print("\nüöÄ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        configs = [
            {'market': 'BTC-PERP', 'interval': '1d', 'days': 7},
            {'market': 'ETH-PERP', 'interval': '1d', 'days': 7},
        ]
        
        for config in configs:
            print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ {config['market']} ({config['interval']})...")
            
            end_date = datetime.now()
            start_date = end_date - timedelta(days=config['days'])
            
            # Fetch
            df = fetcher.fetch_historical(
                market=config['market'],
                interval=config['interval'],
                start_date=start_date,
                end_date=end_date,
                validate=True
            )
            
            assert not df.empty, f"DataFrame –¥–ª—è {config['market']} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            
            # Save
            storage.save(df=df, market=config['market'], interval=config['interval'])
            
            # Verify saved
            assert storage.exists(market=config['market'], interval=config['interval'])
            
            print(f"‚úÖ {config['market']}/{config['interval']}: {len(df)} —Å–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º list_available
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ list_available...")
        available = storage.list_available()
        
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {available}")
        
        assert 'BTC-PERP/1d' in available
        assert 'ETH-PERP/1d' in available
        
        print("\nüéâ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    
    def test_data_validation_detects_issues(self, fetcher):
        """
        –¢–µ—Å—Ç —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.
        
        –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏—Ö –Ω–∞—Ö–æ–¥–∏—Ç.
        """
        print("\nüîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
        bad_df = pd.DataFrame({
            'timestamp': pd.to_datetime(['2022-01-01', '2022-01-02']),
            'open': [50000.0, 50500.0],
            'high': [49000.0, 50000.0],  # HIGH < LOW - –æ—à–∏–±–∫–∞!
            'low': [51000.0, 52000.0],
            'close': [50500.0, 51500.0],
            'volume': [1000.0, 1200.0]
        })
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        errors = fetcher.validate_ohlc(bad_df)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
        assert len(errors) > 0, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ –≤ –ø–ª–æ—Ö–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—à–ª–∞ {len(errors)} –æ—à–∏–±–æ–∫:")
        for err in errors:
            print(f"  - {err}")
        
        print("\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

